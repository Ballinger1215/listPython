#  match_ends
# Given a list of strings, return the count of the number of
# strings where the string length is 2 or more and the first
# and last chars of the string are the same.

def match_ends(words):
  temp = 0
  if len(words) >= 2 and (words)[0] == [len(words)-1]:
      ## += is a way to add to the variable defined above the if statement ##
      temp += 1
  return temp


# front_m
# Given a list of strings, return a list with the strings
# in sorted order, except group all the strings that begin with 'x' first.
# e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields
# ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']

def front_m(words):
  mwords = []
  otherwords = []
  for word in words:
            ## making two list and sorting each of them by "mwords" and "otherwords" as both of the lists ##
        if word[0] == 'x':
            ## append passes a object like "word" to the list or lists like the ones i used "mwords" and "otherwords" ##
            mwords.append(word)
        else:
            otherwords.append(word)
  mwords.sort()
  otherwords.sort()
  mwords.extend(otherwords)
  return mwords


# sort_last
# Given a list of non-empty tuples, return a list sorted in increasing
# order by the last element in each tuple.
# e.g. [(1, 7), (1, 3), (3, 4, 5), (2, 2)] yields
# [(2, 2), (1, 3), (3, 4, 5), (1, 7)]

def sort_last(tuples):
    def GoCats(w):
            return w[len(w)-1]
    return sorted(tuples, key=GoCats)
